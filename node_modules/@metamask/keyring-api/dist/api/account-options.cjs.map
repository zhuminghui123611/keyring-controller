{"version":3,"file":"account-options.cjs","sourceRoot":"","sources":["../../src/api/account-options.ts"],"names":[],"mappings":";;;AAAA,2DAA8E;AAE9E,uDAQ+B;AAC/B,2CAA4D;AAE5D;;GAEG;AACH,IAAY,+BAUX;AAVD,WAAY,+BAA+B;IACzC;;OAEG;IACH,wDAAqB,CAAA;IAErB;;OAEG;IACH,6DAA0B,CAAA;AAC5B,CAAC,EAVW,+BAA+B,+CAA/B,+BAA+B,QAU1C;AAED;;GAEG;AACU,QAAA,0CAA0C,GAAG,IAAA,oBAAM,EAAC;IAC/D;;OAEG;IACH,IAAI,EAAE,IAAA,qBAAO,EAAC,GAAG,+BAA+B,CAAC,QAAQ,EAAE,CAAC;IAE5D;;OAEG;IACH,EAAE,EAAE,IAAA,oBAAM,GAAE,EAAE,4CAA4C;IAE1D;;OAEG;IACH,cAAc,EAAE,IAAA,oBAAM,GAAE;IAExB;;;;;OAKG;IACH,UAAU,EAAE,IAAA,oBAAM,GAAE;CACrB,CAAC,CAAC;AASH;;GAEG;AACU,QAAA,4CAA4C,GAAG,IAAA,oBAAM,EAAC;IACjE;;OAEG;IACH,IAAI,EAAE,IAAA,qBAAO,EAAC,GAAG,+BAA+B,CAAC,UAAU,EAAE,CAAC;CAC/D,CAAC,CAAC;AASH;;GAEG;AACU,QAAA,kCAAkC,GAAG,IAAA,8BAAc,EAC9D,CAAC,KAAU,EAAE,EAAE;IACb,OAAO,IAAA,qBAAa,EAAC,KAAK,CAAC;QACzB,KAAK,CAAC,IAAI,KAAK,+BAA+B,CAAC,UAAU;QACzD,CAAC,CAAC,oDAA4C;QAC9C,CAAC,CAAC,kDAA0C,CAAC;AACjD,CAAC,CACF,CAAC;AASF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACU,QAAA,2BAA2B,GAAG,IAAA,0BAAY,EAAC;IACtD,2CAA2C;IAC3C,IAAA,oBAAM,EAAC,IAAA,oBAAM,GAAE,EAAE,kBAAU,CAAC;IAE5B,kEAAkE;IAClE,oEAAoE;IACpE,oEAAoE;IACpE,EAAE;IACF,uBAAuB;IACvB,uEAAuE;IACvE,oCAAoC;IACpC,IAAA,oBAAI,EAAC;QACH;;WAEG;QACH,OAAO,EAAE,IAAA,6BAAa,EAAC,0CAAkC,CAAC;QAE1D;;WAEG;QACH,UAAU,EAAE,IAAA,6BAAa,EAAC,IAAA,qBAAO,GAAE,CAAC;KACrC,CAAC;CACH,CAAC,CAAC","sourcesContent":["import { exactOptional, selectiveUnion, type } from '@metamask/keyring-utils';\nimport type { Infer } from '@metamask/superstruct';\nimport {\n  boolean,\n  intersection,\n  literal,\n  number,\n  object,\n  record,\n  string,\n} from '@metamask/superstruct';\nimport { isPlainObject, JsonStruct } from '@metamask/utils';\n\n/**\n * Keyring account entropy valid types.\n */\nexport enum KeyringAccountEntropyTypeOption {\n  /**\n   * Indicates that the account was created from a mnemonic phrase.\n   */\n  Mnemonic = 'mnemonic',\n\n  /**\n   * Indicates that the account was imported from a private key.\n   */\n  PrivateKey = 'private-key',\n}\n\n/**\n * Keyring account options struct for mnemonics (BIP-44).\n */\nexport const KeyringAccountEntropyMnemonicOptionsStruct = object({\n  /**\n   * Indicates that the account was created from a mnemonic phrase.\n   */\n  type: literal(`${KeyringAccountEntropyTypeOption.Mnemonic}`),\n\n  /**\n   * The ID of the entropy source.\n   */\n  id: string(), // TODO: Define a struct for entropy source.\n\n  /**\n   * The BIP-44 derivation path used to derive the account.\n   */\n  derivationPath: string(),\n\n  /**\n   * Index used to group accounts in the UI.\n   *\n   * Accounts sharing the same `groupIndex` are displayed together as a\n   * multichain account group.\n   */\n  groupIndex: number(),\n});\n\n/**\n * Keyring account options for mnemonics (BIP-44) {@link KeyringAccountEntropyMnemonicOptionsStruct}.\n */\nexport type KeyringAccountEntropyMnemonicOptions = Infer<\n  typeof KeyringAccountEntropyMnemonicOptionsStruct\n>;\n\n/**\n * Keyring account options struct for private keys.\n */\nexport const KeyringAccountEntropyPrivateKeyOptionsStruct = object({\n  /**\n   * Indicates that the account was imported from a private key.\n   */\n  type: literal(`${KeyringAccountEntropyTypeOption.PrivateKey}`),\n});\n\n/**\n * Keyring account options for private keys {@link KeyringAccountEntropyPrivateKeyOptionsStruct}.\n */\nexport type KeyringAccountEntropyPrivateKeyOptions = Infer<\n  typeof KeyringAccountEntropyPrivateKeyOptionsStruct\n>;\n\n/**\n * Keyring account entropy options struct.\n */\nexport const KeyringAccountEntropyOptionsStruct = selectiveUnion(\n  (value: any) => {\n    return isPlainObject(value) &&\n      value.type === KeyringAccountEntropyTypeOption.PrivateKey\n      ? KeyringAccountEntropyPrivateKeyOptionsStruct\n      : KeyringAccountEntropyMnemonicOptionsStruct;\n  },\n);\n\n/**\n * Keyring account entropy options {@link KeyringAccountEntropyOptionsStruct}.\n */\nexport type KeyringAccountEntropyOptions = Infer<\n  typeof KeyringAccountEntropyOptionsStruct\n>;\n\n/**\n * Keyring options struct. This represents various options for a Keyring account object.\n *\n * See {@link KeyringAccountEntropyMnemonicOptionsStruct} and\n * {@link KeyringAccountEntropyPrivateKeyOptionsStruct}.\n *\n * @example\n * ```ts\n * {\n *   entropy: {\n *     type: 'mnemonic',\n *     id: '01K0BX6VDR5DPDPGGNA8PZVBVB',\n *     derivationPath: \"m/44'/60'/0'/0/0\",\n *     groupIndex: 0,\n *   },\n * }\n * ```\n *\n * @example\n * ```ts\n * {\n *   entropy: {\n *     type: 'private-key',\n *   },\n *   exportable: true,\n * }\n * ```\n *\n * @example\n * ```ts\n * {\n *   some: {\n *     untyped: 'options',\n *     something: true,\n *   },\n * }\n * ```\n */\nexport const KeyringAccountOptionsStruct = intersection([\n  // Non-Typed options (retro-compatibility):\n  record(string(), JsonStruct),\n\n  // Typed options. We use `type` instead of `object` here, to allow\n  // extra properties. Also, since we use `record` + `intersection` we\n  // are guaranteed that all field values will match the `JsonStruct`.\n  //\n  // READ THIS CAREFULLY:\n  // Previous options that can be matched by this struct will be breaking\n  // existing keyring account options.\n  type({\n    /**\n     * Entropy options.\n     */\n    entropy: exactOptional(KeyringAccountEntropyOptionsStruct),\n\n    /**\n     * Indicates whether the account can be exported.\n     */\n    exportable: exactOptional(boolean()),\n  }),\n]);\n\n/**\n * Keyring account options {@link KeyringAccountOptionsStruct}.\n */\nexport type KeyringAccountOptions = Infer<typeof KeyringAccountOptionsStruct>;\n"]}