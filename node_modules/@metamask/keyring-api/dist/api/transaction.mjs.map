{"version":3,"file":"transaction.mjs","sourceRoot":"","sources":["../../src/api/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import type { InferEquals } from '@metamask/keyring-utils';\nimport { object, UuidStruct } from '@metamask/keyring-utils';\nimport type { Infer } from '@metamask/superstruct';\nimport { array, enums, nullable, number, string } from '@metamask/superstruct';\n\nimport { AssetStruct } from './asset';\nimport { CaipChainIdStruct } from './caip';\nimport type { Paginated } from './pagination';\n\n/**\n * This struct represents a participant in a transaction.\n *\n * @example\n * ```ts\n * {\n *   address: '0x1234...',\n *   asset: {\n *     fungible: true,\n *     type: 'eip155:1/slip44:60',\n *     unit: 'ETH',\n *     amount: '0.01',\n *   },\n * },\n * ```\n *\n * @example\n * ```ts\n * {\n *   address: '0x1234...',\n *   asset: {\n *     fungible: false,\n *     id: 'eip155:1/erc721:0x06012c8cf97BEaD5deAe237070F9587f8E7A266d/771769',\n *   },\n * },\n * ```\n *\n * @example\n * ```ts\n * {\n *   address: '0x1234...',\n *   asset: null,\n * },\n * ```\n */\nconst ParticipantStruct = object({\n  /**\n   * Participant address.\n   */\n  address: string(),\n\n  /**\n   * Asset being transferred.\n   */\n  asset: nullable(AssetStruct),\n});\n\n/**\n * Fee types.\n */\nexport enum FeeType {\n  /**\n   * Base fee. It is the minimum fee required to include a transaction in the\n   * blockchain.\n   *\n   * For non-confirmed transactions, it must be the maximum base fee. For\n   * confirmed transactions, it must be the actual base fee paid.\n   */\n  Base = 'base',\n\n  /**\n   * Priority fee. It is an optional fee used to prioritize the transaction.\n   *\n   * For non-confirmed transactions, it must be the maximum priority fee. For\n   * confirmed transactions, it must be the actual priority fee paid.\n   */\n  Priority = 'priority',\n}\n\n/**\n * This struct represents a transaction fee.\n */\nconst FeeStruct = object({\n  /**\n   * Fee type {@see FeeType}.\n   */\n  type: enums([`${FeeType.Base}`, `${FeeType.Priority}`]),\n\n  /**\n   * Asset used to pay for the fee.\n   */\n  asset: AssetStruct,\n});\n\n/**\n * Transaction statuses.\n */\nexport enum TransactionStatus {\n  /**\n   * The transaction has been submitted but is not yet in the\n   * blockchain. For example, it can be in the mempool.\n   */\n  Submitted = 'submitted',\n\n  /**\n   * The transaction is in the blockchain but has not been\n   * confirmed yet.\n   */\n  Unconfirmed = 'unconfirmed',\n\n  /**\n   * The transaction has been confirmed.\n   */\n  Confirmed = 'confirmed',\n\n  /**\n   * The transaction has failed. For example, it has been reverted.\n   */\n  Failed = 'failed',\n}\n\n/**\n * Transaction types.\n */\nexport enum TransactionType {\n  /**\n   * The transaction was originated by the account. If the transaction\n   * has a change output that goes back to the same account, it must be tagged\n   * as a send transaction.\n   */\n  Send = 'send',\n\n  /**\n   * The transaction was received by the account, but originated by\n   * another account.\n   */\n  Receive = 'receive',\n\n  /**\n   * The transaction is a swap. It decreases the balance of one asset and\n   * increases the balance of another asset in a single transaction.\n   *\n   * A swap transaction must be originated by the account.\n   */\n  Swap = 'swap',\n\n  /**\n   * Represents an outgoing bridge transaction, transferring assets from\n   * the account to another blockchain.\n   */\n  BridgeSend = 'bridge:send',\n\n  /**\n   * Represents an incoming bridge transaction, transferring assets from\n   * another blockchain to the account.\n   */\n  BridgeReceive = 'bridge:receive',\n\n  /**\n   * The transaction type is unknown. It's not possible to determine the\n   * transaction type based on the information available.\n   */\n  Unknown = 'unknown',\n}\n\n/**\n * This struct represents a transaction event.\n */\nexport const TransactionEventStruct = object({\n  /**\n   * New status of the transaction.\n   */\n  status: enums([\n    `${TransactionStatus.Submitted}`,\n    `${TransactionStatus.Unconfirmed}`,\n    `${TransactionStatus.Confirmed}`,\n    `${TransactionStatus.Failed}`,\n  ]),\n\n  /**\n   * UNIX timestamp of when the event occurred.\n   */\n  timestamp: nullable(number()),\n});\n\n/**\n * This struct represents a blockchain transaction.\n *\n * @example\n * ```ts\n * const tx = {\n *   id: 'f5d8ee39a430901c91a5917b9f2dc19d6d1a0e9cea205b009ca73dd04470b9a6',\n *   chain: 'bip122:000000000019d6689c085ae165831e93',\n *   account: 'b9beb861-9761-4b97-89ce-d992be5f34da',\n *   status: 'confirmed',\n *   timestamp: 1716367781,\n *   type: 'send',\n *   from: [\n *     {\n *       address: 'bc1qrp0yzgkf8rawkuvdlhnjfj2fnjwm0m8727kgah',\n *       asset: {\n *         fungible: true,\n *         type: 'bip122:000000000019d6689c085ae165831e93/slip44:0',\n *         unit: 'BTC',\n *         amount: '0.1',\n *       },\n *     },\n *   ],\n *   to: [\n *     {\n *       address: 'bc1qrp0yzgkf8rawkuvdlhnjfj2fnjwm0m8727kgah',\n *       asset: {\n *         fungible: true,\n *         type: 'bip122:000000000019d6689c085ae165831e93/slip44:0',\n *         unit: 'BTC',\n *         amount: '0.1',\n *       },\n *     },\n *     {\n *       address: 'bc1qwl8399fz829uqvqly9tcatgrgtwp3udnhxfq4k',\n *       asset: {\n *         fungible: true,\n *         type: 'bip122:000000000019d6689c085ae165831e93/slip44:0',\n *         unit: 'BTC',\n *         amount: '0.1',\n *       },\n *     },\n *   ],\n *   fees: [\n *     {\n *       type: 'priority',\n *       asset: {\n *         fungible: true,\n *         type: 'bip122:000000000019d6689c085ae165831e93/slip44:0',\n *         unit: 'BTC',\n *         amount: '0.1',\n *       },\n *     },\n *   ],\n * };\n * ```\n */\nexport const TransactionStruct = object({\n  /**\n   * Chain-specific transaction ID.\n   */\n  id: string(),\n\n  /**\n   * Chain ID (CAIP-2).\n   */\n  chain: CaipChainIdStruct,\n\n  /**\n   * Account ID (UUIDv4).\n   */\n  account: UuidStruct,\n\n  /**\n   * Transaction status {@see TransactionStatus}.\n   */\n  status: enums([\n    `${TransactionStatus.Submitted}`,\n    `${TransactionStatus.Unconfirmed}`,\n    `${TransactionStatus.Confirmed}`,\n    `${TransactionStatus.Failed}`,\n  ]),\n\n  /**\n   * UNIX timestamp of when the transaction was added to the blockchain. The\n   * timestamp can be null if the transaction has not been included in the\n   * blockchain yet.\n   */\n  timestamp: nullable(number()),\n\n  /**\n   * Transaction type {@see TransactionType}. This will be used by MetaMask to enrich the transaction\n   * details on the UI.\n   */\n  type: enums([\n    `${TransactionType.Send}`,\n    `${TransactionType.Receive}`,\n    `${TransactionType.Swap}`,\n    `${TransactionType.BridgeSend}`,\n    `${TransactionType.BridgeReceive}`,\n    `${TransactionType.Unknown}`,\n  ]),\n\n  /**\n   * Transaction sender addresses and amounts.\n   */\n  from: array(ParticipantStruct),\n\n  /**\n   * Transaction receiver addresses and amounts.\n   */\n  to: array(ParticipantStruct),\n\n  /**\n   * Total transaction fee.\n   */\n  fees: array(FeeStruct),\n\n  /**\n   * List of events related to the transaction {@see TransactionEventStruct}.\n   *\n   * The events are tracked in a best-effort basis and may not be available for\n   * all transactions.\n   */\n  events: array(TransactionEventStruct),\n});\n\n/**\n * Transaction object.\n *\n * See {@link TransactionStruct}.\n */\nexport type Transaction = Infer<typeof TransactionStruct>;\n\n/**\n * This struct represents a page of transactions.\n *\n * @example\n * ```ts\n * {\n *   data: [\n *     {\n *       // Transaction object\n *     }\n *   ],\n *   next: 'c3y1Q6QtqtstbxKX+oqVdEW6',\n * }\n * ```\n *\n * @example\n * ```ts\n * {\n *   data: [\n *     {\n *       // Transaction object\n *     }\n *   ],\n *   next: null, // No more results\n * }**\n * ```\n */\nexport const TransactionsPageStruct = object({\n  /**\n   * List of transactions.\n   */\n  data: array(TransactionStruct),\n\n  /**\n   * Next cursor to iterate over the results. If null, there are no more\n   * results.\n   */\n  next: nullable(string()),\n});\n\n/**\n * Transactions page object.\n *\n * See {@link TransactionsPageStruct}.\n */\nexport type TransactionsPage = InferEquals<\n  typeof TransactionsPageStruct,\n  Paginated<Transaction>\n>;\n"]}